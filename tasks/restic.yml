- name: check if restic is installed
  stat: path=/usr/local/bin/restic
  register: restic_stat_result

- name: download restic
  get_url:
    url: 'https://github.com/restic/restic/releases/download/v{{ restic_version }}/restic_{{ restic_version }}_linux_amd64.bz2'
    dest: '/tmp/restic_{{ restic_version }}_linux_amd64.bz2'
    checksum: sha256:82c596e4b30f9be61f942b26948a5e51c6910e36073f6c5e531ddca8f60356d1
  when: restic_stat_result.stat.exists == False

- name: unarchive restic
  command: 'bzip2 -dk /tmp/restic_{{ restic_version }}_linux_amd64.bz2'
  when: restic_stat_result.stat.exists == False

- name: make restic executable
  file:
    path: '/tmp/restic_{{ restic_version }}_linux_amd64'
    mode: 0755
  when: restic_stat_result.stat.exists == False

- name: move restic
  command: 'mv /tmp/restic_{{ restic_version }}_linux_amd64 /usr/local/bin/restic'
  when: restic_stat_result.stat.exists == False

- name: add backup user
  user:
    name: '{{ backup_user }}'
    createhome: yes
    shell: /usr/sbin/nologin
    groups: wildfly
    append: yes

- name: create ssh folder for backup user
  file:
    path: '/home/{{ backup_user }}/.ssh/'
    state: directory
    owner: '{{ backup_user }}'
    group: '{{ backup_user }}'
    mode: 0700

- name: copy private key for backup user
  copy:
    src: '{{ playbook_dir }}/{{ backup_user_id_rsa_path }}'
    dest: '/home/{{ backup_user }}/.ssh/id_rsa'
    owner: '{{ backup_user }}'
    group: '{{ backup_user }}'
    mode: 0600

- name: copy ssh config for backup user
  template:
    src: ../files/restic/ssh-config.j2
    dest: '/home/{{ backup_user }}/.ssh/config'
    owner: '{{ backup_user }}'
    group: '{{ backup_user }}'
    mode: 0600

- name: install backup script
  template:
    src: ../files/restic/backup.bash.j2
    dest: '/home/{{ backup_user }}/backup.bash'
    owner: '{{ backup_user }}'
    group: '{{ backup_user }}'
    mode: 0500

- name: install repository password file
  template:
    src: ../files/restic/repository-password.j2
    dest: '/home/{{ backup_user }}/repository-password'
    owner: '{{ backup_user }}'
    group: '{{ backup_user }}'
    mode: 0400

- name: install restic backup crontab
  cron:
    name: 'restic backup'
    minute: '8'
    hour: '*/6'
    job: '/home/{{ backup_user }}/backup.bash backup'
    user: '{{ backup_user }}'

- name: install restic cleanup crontab
  cron:
    name: 'restic cleanup'
    special_time: 'daily'
    job: '/home/{{ backup_user }}/backup.bash cleanup'
    user: '{{ backup_user }}'
  when: backup_restore_server is undefined



- name: init restic repository
  command: "su -s /bin/bash -c '/home/{{ backup_user }}/backup.bash init' {{ backup_user }}"
